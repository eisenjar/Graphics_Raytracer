Summary
For our assignment 3, we did the advanced ray tracer with refraction, glossy reflection, motion blur, compound objects (cylinder), and texture mapping.
In the saved bitmap files, the cube has the gloss in the final version, and the back wall has the gloss in the gloss/no_gloss versions. I found it took an unreal amount of time to get gloss to render, so only a few objects have gloss. I also added a few views where the cylinder has gloss.
 

Part 1

Ray casting - most of this was already taken care of for us.  We needed to transform the rays to world space and compute the direction.

Ray-sphere intersection - we created and solved a quadratic equation for the intersection of a line and a sphere.  If there were two intersections, we chose the closer one.

Ray-square intersection - we computed where the ray intersected the xy plane, and then made sure that it was within the bounds of the unit square.

Phong shading - we used the formulas described in class for ambient, diffuse and specular shading.  The material coefficients were taken from the object properties.

Anti-aliasing - instead of shooting one ray per pixel, we shot four evenly spaced rays through each pixel half way inbeween the centre of the pixel and the corners (ie (.25,.75),(.25,.25) etc.). This gave good results and reduced the amount of aliasing without requiring a more performance intensive solution, such as shooting more rays, or using a pseudo random number generator to determine the sample location of the pixel.


Part 2

Secondary reflection with specularities - when we have an intersection, we shoot another ray in the direction reflected across the normal.  Then, if that ray hit something, we treat it as a light source and add the color produced by that intersection.  We do this recursively until we hit the defined maximum number of bounces.

Motion Blur - we created one frame, moved the objects, and then created another frame.  We then created the final frame by averaging the other two frames.

Shadows - to determine shadows we shoot a ray directed at each light. If the ray doesn't hit an object between the light and the intersection, we assume that that intersection point is lit by that light (ie has a specular/diffuse light). If it is behind an object we assume that it is not shaded by that light. If the object being hit is partially transparent, we sample the color of the object based on the amount of light that would go through (as a function of the transparency value). We can't accurately display caustics using a simple raytracer, we would have to do something more advanced such as photon mapping. We also have no way to know if a transparent object in front of an intersection point has another object the light for it. So we assume all transparent objects cast shadows with refraction index = 1.

Glossy reflections - if a material is demeed to be glossy it means the light reflecting off the material does not reflect at the exact angle of incidence. There is some random "glossy" factor that makes all rays that hit a glossy material bounce in random directions. We shoot more than 1 ray when we hit a glossy material to ensure that we don't sample incorrectly. We take the average of all the samples and use that to determine the gloss.

Refraction - this was done using Snell's law equations, we assume that all rays originate in air (refractive index = 1) and based on the angle of incidence and the refractive index of the material being hit, we adjust the angle. We do the opposite when we find the normal points in the same direction of the array, as it's assumed that the ray is leaving the object.

Texture Mapping - we saved bitmap images, and used the functions defined in bmp_io to read them.  We then created a mapping function from the object-space coordinates to coordinates in the picture, and used those to pick which pixel of the bitmap to use.  We then overwrote the diffuse material properties of the object with the computed ones.

Ray-Cylinder intersection - we created and solved a quadratic equation for the intersection of a line and a cylinder.  If there were two intersections, we chose the closer one.  We also defined a circle intersection function to handle the circular faces.


Directory Structure
Since we did the advanced ray tracer, we essentially did exactly what was told to do in the comments of each function. For example refraction and reflection are done in shaderay, anti-aliasing is done in render.


Parts completed by Each Partner

Part 1:
Both did it together in the lab.
Griffin did AA, Jared did the sphere interesection alone.

Part 2:
Jared:
Secondary reflections
Texture Mapping
Ray-Cylinder intersection

Griffin:
Shadows
Refraction
Motion Blur
Glossy Reflections
